// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: services/link/v1/short_link.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on GenerateShortUrlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GenerateShortUrlRequest) Validate() error {
	if m == nil {
		return nil
	}

	if uri, err := url.Parse(m.GetUrl()); err != nil {
		return GenerateShortUrlRequestValidationError{
			field:  "Url",
			reason: "value must be a valid URI",
			cause:  err,
		}
	} else if !uri.IsAbs() {
		return GenerateShortUrlRequestValidationError{
			field:  "Url",
			reason: "value must be absolute",
		}
	}

	return nil
}

// GenerateShortUrlRequestValidationError is the validation error returned by
// GenerateShortUrlRequest.Validate if the designated constraints aren't met.
type GenerateShortUrlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateShortUrlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateShortUrlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateShortUrlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateShortUrlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateShortUrlRequestValidationError) ErrorName() string {
	return "GenerateShortUrlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateShortUrlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateShortUrlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateShortUrlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateShortUrlRequestValidationError{}

// Validate checks the field values on GenerateShortUrlReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GenerateShortUrlReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Url

	return nil
}

// GenerateShortUrlReplyValidationError is the validation error returned by
// GenerateShortUrlReply.Validate if the designated constraints aren't met.
type GenerateShortUrlReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateShortUrlReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateShortUrlReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateShortUrlReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateShortUrlReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateShortUrlReplyValidationError) ErrorName() string {
	return "GenerateShortUrlReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateShortUrlReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateShortUrlReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateShortUrlReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateShortUrlReplyValidationError{}

// Validate checks the field values on TransformLongUrlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TransformLongUrlRequest) Validate() error {
	if m == nil {
		return nil
	}

	if uri, err := url.Parse(m.GetUrl()); err != nil {
		return TransformLongUrlRequestValidationError{
			field:  "Url",
			reason: "value must be a valid URI",
			cause:  err,
		}
	} else if !uri.IsAbs() {
		return TransformLongUrlRequestValidationError{
			field:  "Url",
			reason: "value must be absolute",
		}
	}

	return nil
}

// TransformLongUrlRequestValidationError is the validation error returned by
// TransformLongUrlRequest.Validate if the designated constraints aren't met.
type TransformLongUrlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransformLongUrlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransformLongUrlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransformLongUrlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransformLongUrlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransformLongUrlRequestValidationError) ErrorName() string {
	return "TransformLongUrlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TransformLongUrlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransformLongUrlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransformLongUrlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransformLongUrlRequestValidationError{}

// Validate checks the field values on TransformLongUrlReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TransformLongUrlReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Url

	return nil
}

// TransformLongUrlReplyValidationError is the validation error returned by
// TransformLongUrlReply.Validate if the designated constraints aren't met.
type TransformLongUrlReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransformLongUrlReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransformLongUrlReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransformLongUrlReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransformLongUrlReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransformLongUrlReplyValidationError) ErrorName() string {
	return "TransformLongUrlReplyValidationError"
}

// Error satisfies the builtin error interface
func (e TransformLongUrlReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransformLongUrlReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransformLongUrlReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransformLongUrlReplyValidationError{}
