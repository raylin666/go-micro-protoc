// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.4

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type AuthHTTPServer interface {
	AddRoleForUser(context.Context, *AddRoleForUserRequest) (*AddRoleForUserReply, error)
	DeleteRole(context.Context, *DeleteRoleRequest) (*emptypb.Empty, error)
	DeleteRoleForUser(context.Context, *DeleteRoleForUserRequest) (*emptypb.Empty, error)
	DeleteRolesForUser(context.Context, *DeleteRolesForUserRequest) (*emptypb.Empty, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error)
	GetRolesForUser(context.Context, *GetRolesForUserRequest) (*GetRolesForUserReply, error)
	GetUsersForRole(context.Context, *GetUsersForRoleRequest) (*GetUsersForRoleReply, error)
	HasRoleForUser(context.Context, *HasRoleForUserRequest) (*HasRoleForUserReply, error)
}

func RegisterAuthHTTPServer(s *http.Server, srv AuthHTTPServer) {
	r := s.Route("/")
	r.GET("/user/{user}/roles", _Auth_GetRolesForUser0_HTTP_Handler(srv))
	r.POST("/user/add_role/{user}", _Auth_AddRoleForUser0_HTTP_Handler(srv))
	r.GET("/role/{role}/users", _Auth_GetUsersForRole0_HTTP_Handler(srv))
	r.GET("/user/has_role/{user}?role={role}", _Auth_HasRoleForUser0_HTTP_Handler(srv))
	r.DELETE("/user/delete_role/{user}/{role}", _Auth_DeleteRoleForUser0_HTTP_Handler(srv))
	r.DELETE("/user/delete_roles/{user}", _Auth_DeleteRolesForUser0_HTTP_Handler(srv))
	r.DELETE("/user/delete/{user}", _Auth_DeleteUser0_HTTP_Handler(srv))
	r.DELETE("/role/delete/{role}", _Auth_DeleteRole0_HTTP_Handler(srv))
}

func _Auth_GetRolesForUser0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRolesForUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/services.auth.v1.Auth/GetRolesForUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRolesForUser(ctx, req.(*GetRolesForUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRolesForUserReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_AddRoleForUser0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddRoleForUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/services.auth.v1.Auth/AddRoleForUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddRoleForUser(ctx, req.(*AddRoleForUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddRoleForUserReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_GetUsersForRole0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUsersForRoleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/services.auth.v1.Auth/GetUsersForRole")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUsersForRole(ctx, req.(*GetUsersForRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUsersForRoleReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_HasRoleForUser0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HasRoleForUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/services.auth.v1.Auth/HasRoleForUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HasRoleForUser(ctx, req.(*HasRoleForUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HasRoleForUserReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_DeleteRoleForUser0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRoleForUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/services.auth.v1.Auth/DeleteRoleForUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRoleForUser(ctx, req.(*DeleteRoleForUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Auth_DeleteRolesForUser0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRolesForUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/services.auth.v1.Auth/DeleteRolesForUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRolesForUser(ctx, req.(*DeleteRolesForUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Auth_DeleteUser0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/services.auth.v1.Auth/DeleteUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteUser(ctx, req.(*DeleteUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Auth_DeleteRole0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRoleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/services.auth.v1.Auth/DeleteRole")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRole(ctx, req.(*DeleteRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type AuthHTTPClient interface {
	AddRoleForUser(ctx context.Context, req *AddRoleForUserRequest, opts ...http.CallOption) (rsp *AddRoleForUserReply, err error)
	DeleteRole(ctx context.Context, req *DeleteRoleRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteRoleForUser(ctx context.Context, req *DeleteRoleForUserRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteRolesForUser(ctx context.Context, req *DeleteRolesForUserRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteUser(ctx context.Context, req *DeleteUserRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetRolesForUser(ctx context.Context, req *GetRolesForUserRequest, opts ...http.CallOption) (rsp *GetRolesForUserReply, err error)
	GetUsersForRole(ctx context.Context, req *GetUsersForRoleRequest, opts ...http.CallOption) (rsp *GetUsersForRoleReply, err error)
	HasRoleForUser(ctx context.Context, req *HasRoleForUserRequest, opts ...http.CallOption) (rsp *HasRoleForUserReply, err error)
}

type AuthHTTPClientImpl struct {
	cc *http.Client
}

func NewAuthHTTPClient(client *http.Client) AuthHTTPClient {
	return &AuthHTTPClientImpl{client}
}

func (c *AuthHTTPClientImpl) AddRoleForUser(ctx context.Context, in *AddRoleForUserRequest, opts ...http.CallOption) (*AddRoleForUserReply, error) {
	var out AddRoleForUserReply
	pattern := "/user/add_role/{user}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/services.auth.v1.Auth/AddRoleForUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/role/delete/{role}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/services.auth.v1.Auth/DeleteRole"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) DeleteRoleForUser(ctx context.Context, in *DeleteRoleForUserRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user/delete_role/{user}/{role}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/services.auth.v1.Auth/DeleteRoleForUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) DeleteRolesForUser(ctx context.Context, in *DeleteRolesForUserRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user/delete_roles/{user}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/services.auth.v1.Auth/DeleteRolesForUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user/delete/{user}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/services.auth.v1.Auth/DeleteUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) GetRolesForUser(ctx context.Context, in *GetRolesForUserRequest, opts ...http.CallOption) (*GetRolesForUserReply, error) {
	var out GetRolesForUserReply
	pattern := "/user/{user}/roles"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/services.auth.v1.Auth/GetRolesForUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) GetUsersForRole(ctx context.Context, in *GetUsersForRoleRequest, opts ...http.CallOption) (*GetUsersForRoleReply, error) {
	var out GetUsersForRoleReply
	pattern := "/role/{role}/users"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/services.auth.v1.Auth/GetUsersForRole"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) HasRoleForUser(ctx context.Context, in *HasRoleForUserRequest, opts ...http.CallOption) (*HasRoleForUserReply, error) {
	var out HasRoleForUserReply
	pattern := "/user/has_role/{user}?role={role}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/services.auth.v1.Auth/HasRoleForUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
