// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: basic/v1/short_link.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GenerateShortUrlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateShortUrlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateShortUrlRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateShortUrlRequestMultiError, or nil if none found.
func (m *GenerateShortUrlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateShortUrlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if uri, err := url.Parse(m.GetUrl()); err != nil {
		err = GenerateShortUrlRequestValidationError{
			field:  "Url",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := GenerateShortUrlRequestValidationError{
			field:  "Url",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GenerateShortUrlRequestMultiError(errors)
	}

	return nil
}

// GenerateShortUrlRequestMultiError is an error wrapping multiple validation
// errors returned by GenerateShortUrlRequest.ValidateAll() if the designated
// constraints aren't met.
type GenerateShortUrlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateShortUrlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateShortUrlRequestMultiError) AllErrors() []error { return m }

// GenerateShortUrlRequestValidationError is the validation error returned by
// GenerateShortUrlRequest.Validate if the designated constraints aren't met.
type GenerateShortUrlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateShortUrlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateShortUrlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateShortUrlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateShortUrlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateShortUrlRequestValidationError) ErrorName() string {
	return "GenerateShortUrlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateShortUrlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateShortUrlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateShortUrlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateShortUrlRequestValidationError{}

// Validate checks the field values on GenerateShortUrlResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateShortUrlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateShortUrlResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateShortUrlResponseMultiError, or nil if none found.
func (m *GenerateShortUrlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateShortUrlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return GenerateShortUrlResponseMultiError(errors)
	}

	return nil
}

// GenerateShortUrlResponseMultiError is an error wrapping multiple validation
// errors returned by GenerateShortUrlResponse.ValidateAll() if the designated
// constraints aren't met.
type GenerateShortUrlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateShortUrlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateShortUrlResponseMultiError) AllErrors() []error { return m }

// GenerateShortUrlResponseValidationError is the validation error returned by
// GenerateShortUrlResponse.Validate if the designated constraints aren't met.
type GenerateShortUrlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateShortUrlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateShortUrlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateShortUrlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateShortUrlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateShortUrlResponseValidationError) ErrorName() string {
	return "GenerateShortUrlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateShortUrlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateShortUrlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateShortUrlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateShortUrlResponseValidationError{}

// Validate checks the field values on TransformLongUrlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransformLongUrlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransformLongUrlRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransformLongUrlRequestMultiError, or nil if none found.
func (m *TransformLongUrlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TransformLongUrlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if uri, err := url.Parse(m.GetUrl()); err != nil {
		err = TransformLongUrlRequestValidationError{
			field:  "Url",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := TransformLongUrlRequestValidationError{
			field:  "Url",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TransformLongUrlRequestMultiError(errors)
	}

	return nil
}

// TransformLongUrlRequestMultiError is an error wrapping multiple validation
// errors returned by TransformLongUrlRequest.ValidateAll() if the designated
// constraints aren't met.
type TransformLongUrlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransformLongUrlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransformLongUrlRequestMultiError) AllErrors() []error { return m }

// TransformLongUrlRequestValidationError is the validation error returned by
// TransformLongUrlRequest.Validate if the designated constraints aren't met.
type TransformLongUrlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransformLongUrlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransformLongUrlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransformLongUrlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransformLongUrlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransformLongUrlRequestValidationError) ErrorName() string {
	return "TransformLongUrlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TransformLongUrlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransformLongUrlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransformLongUrlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransformLongUrlRequestValidationError{}

// Validate checks the field values on TransformLongUrlResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransformLongUrlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransformLongUrlResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransformLongUrlResponseMultiError, or nil if none found.
func (m *TransformLongUrlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TransformLongUrlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return TransformLongUrlResponseMultiError(errors)
	}

	return nil
}

// TransformLongUrlResponseMultiError is an error wrapping multiple validation
// errors returned by TransformLongUrlResponse.ValidateAll() if the designated
// constraints aren't met.
type TransformLongUrlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransformLongUrlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransformLongUrlResponseMultiError) AllErrors() []error { return m }

// TransformLongUrlResponseValidationError is the validation error returned by
// TransformLongUrlResponse.Validate if the designated constraints aren't met.
type TransformLongUrlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransformLongUrlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransformLongUrlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransformLongUrlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransformLongUrlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransformLongUrlResponseValidationError) ErrorName() string {
	return "TransformLongUrlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TransformLongUrlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransformLongUrlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransformLongUrlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransformLongUrlResponseValidationError{}
