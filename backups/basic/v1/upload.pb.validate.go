// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: basic/v1/upload.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on StreamUploadFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamUploadFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamUploadFileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamUploadFileRequestMultiError, or nil if none found.
func (m *StreamUploadFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamUploadFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetStream()) < 10 {
		err := StreamUploadFileRequestValidationError{
			field:  "Stream",
			reason: "value length must be at least 10 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMimeType()) < 3 {
		err := StreamUploadFileRequestValidationError{
			field:  "MimeType",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StreamUploadFileRequestMultiError(errors)
	}

	return nil
}

// StreamUploadFileRequestMultiError is an error wrapping multiple validation
// errors returned by StreamUploadFileRequest.ValidateAll() if the designated
// constraints aren't met.
type StreamUploadFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamUploadFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamUploadFileRequestMultiError) AllErrors() []error { return m }

// StreamUploadFileRequestValidationError is the validation error returned by
// StreamUploadFileRequest.Validate if the designated constraints aren't met.
type StreamUploadFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamUploadFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamUploadFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamUploadFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamUploadFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamUploadFileRequestValidationError) ErrorName() string {
	return "StreamUploadFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamUploadFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamUploadFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamUploadFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamUploadFileRequestValidationError{}

// Validate checks the field values on StreamUploadFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamUploadFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamUploadFileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamUploadFileResponseMultiError, or nil if none found.
func (m *StreamUploadFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamUploadFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Hash

	// no validation rules for Uuid

	// no validation rules for Key

	// no validation rules for Fsize

	// no validation rules for Url

	// no validation rules for Name

	// no validation rules for Bucket

	// no validation rules for MimeType

	// no validation rules for Ext

	if len(errors) > 0 {
		return StreamUploadFileResponseMultiError(errors)
	}

	return nil
}

// StreamUploadFileResponseMultiError is an error wrapping multiple validation
// errors returned by StreamUploadFileResponse.ValidateAll() if the designated
// constraints aren't met.
type StreamUploadFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamUploadFileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamUploadFileResponseMultiError) AllErrors() []error { return m }

// StreamUploadFileResponseValidationError is the validation error returned by
// StreamUploadFileResponse.Validate if the designated constraints aren't met.
type StreamUploadFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamUploadFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamUploadFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamUploadFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamUploadFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamUploadFileResponseValidationError) ErrorName() string {
	return "StreamUploadFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StreamUploadFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamUploadFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamUploadFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamUploadFileResponseValidationError{}

// Validate checks the field values on UrlUploadFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UrlUploadFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UrlUploadFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UrlUploadFileRequestMultiError, or nil if none found.
func (m *UrlUploadFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UrlUploadFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if uri, err := url.Parse(m.GetUrl()); err != nil {
		err = UrlUploadFileRequestValidationError{
			field:  "Url",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := UrlUploadFileRequestValidationError{
			field:  "Url",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UrlUploadFileRequestMultiError(errors)
	}

	return nil
}

// UrlUploadFileRequestMultiError is an error wrapping multiple validation
// errors returned by UrlUploadFileRequest.ValidateAll() if the designated
// constraints aren't met.
type UrlUploadFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UrlUploadFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UrlUploadFileRequestMultiError) AllErrors() []error { return m }

// UrlUploadFileRequestValidationError is the validation error returned by
// UrlUploadFileRequest.Validate if the designated constraints aren't met.
type UrlUploadFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UrlUploadFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UrlUploadFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UrlUploadFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UrlUploadFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UrlUploadFileRequestValidationError) ErrorName() string {
	return "UrlUploadFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UrlUploadFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUrlUploadFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UrlUploadFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UrlUploadFileRequestValidationError{}

// Validate checks the field values on UrlUploadFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UrlUploadFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UrlUploadFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UrlUploadFileResponseMultiError, or nil if none found.
func (m *UrlUploadFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UrlUploadFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Hash

	// no validation rules for Key

	// no validation rules for Fsize

	// no validation rules for Url

	// no validation rules for MimeType

	if len(errors) > 0 {
		return UrlUploadFileResponseMultiError(errors)
	}

	return nil
}

// UrlUploadFileResponseMultiError is an error wrapping multiple validation
// errors returned by UrlUploadFileResponse.ValidateAll() if the designated
// constraints aren't met.
type UrlUploadFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UrlUploadFileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UrlUploadFileResponseMultiError) AllErrors() []error { return m }

// UrlUploadFileResponseValidationError is the validation error returned by
// UrlUploadFileResponse.Validate if the designated constraints aren't met.
type UrlUploadFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UrlUploadFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UrlUploadFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UrlUploadFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UrlUploadFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UrlUploadFileResponseValidationError) ErrorName() string {
	return "UrlUploadFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UrlUploadFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUrlUploadFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UrlUploadFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UrlUploadFileResponseValidationError{}
