// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsServerError(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SERVER_ERROR.String() && e.Code == 500
}

func ErrorServerError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_SERVER_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsDataValidateError(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DATA_VALIDATE_ERROR.String() && e.Code == 422
}

func ErrorDataValidateError(format string, args ...interface{}) *errors.Error {
	return errors.New(422, ErrorReason_DATA_VALIDATE_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsDataSelectError(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DATA_SELECT_ERROR.String() && e.Code == 400
}

func ErrorDataSelectError(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_DATA_SELECT_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsDataAlreadyExists(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DATA_ALREADY_EXISTS.String() && e.Code == 400
}

func ErrorDataAlreadyExists(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_DATA_ALREADY_EXISTS.String(), fmt.Sprintf(format, args...))
}

func IsDataNotFound(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DATA_NOT_FOUND.String() && e.Code == 400
}

func ErrorDataNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_DATA_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsNotLoginError(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NOT_LOGIN_ERROR.String() && e.Code == 401
}

func ErrorNotLoginError(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_NOT_LOGIN_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsAccountNotFound(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ACCOUNT_NOT_FOUND.String() && e.Code == 404
}

func ErrorAccountNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_ACCOUNT_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsAccountOrPasswordError(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ACCOUNT_OR_PASSWORD_ERROR.String() && e.Code == 400
}

func ErrorAccountOrPasswordError(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ACCOUNT_OR_PASSWORD_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsAccountLoginError(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ACCOUNT_LOGIN_ERROR.String() && e.Code == 400
}

func ErrorAccountLoginError(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ACCOUNT_LOGIN_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsAccountFreezeError(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ACCOUNT_FREEZE_ERROR.String() && e.Code == 400
}

func ErrorAccountFreezeError(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ACCOUNT_FREEZE_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsAccountPermissionError(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ACCOUNT_PERMISSION_ERROR.String() && e.Code == 401
}

func ErrorAccountPermissionError(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_ACCOUNT_PERMISSION_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsAccountMenuListError(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ACCOUNT_MENU_LIST_ERROR.String() && e.Code == 400
}

func ErrorAccountMenuListError(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ACCOUNT_MENU_LIST_ERROR.String(), fmt.Sprintf(format, args...))
}
