// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user/v1/auth_control.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetRolesForUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRolesForUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRolesForUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRolesForUserRequestMultiError, or nil if none found.
func (m *GetRolesForUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRolesForUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetRolesForUserRequestMultiError(errors)
	}

	return nil
}

// GetRolesForUserRequestMultiError is an error wrapping multiple validation
// errors returned by GetRolesForUserRequest.ValidateAll() if the designated
// constraints aren't met.
type GetRolesForUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRolesForUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRolesForUserRequestMultiError) AllErrors() []error { return m }

// GetRolesForUserRequestValidationError is the validation error returned by
// GetRolesForUserRequest.Validate if the designated constraints aren't met.
type GetRolesForUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRolesForUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRolesForUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRolesForUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRolesForUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRolesForUserRequestValidationError) ErrorName() string {
	return "GetRolesForUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRolesForUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRolesForUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRolesForUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRolesForUserRequestValidationError{}

// Validate checks the field values on GetRolesForUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRolesForUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRolesForUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRolesForUserResponseMultiError, or nil if none found.
func (m *GetRolesForUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRolesForUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetRolesForUserResponseMultiError(errors)
	}

	return nil
}

// GetRolesForUserResponseMultiError is an error wrapping multiple validation
// errors returned by GetRolesForUserResponse.ValidateAll() if the designated
// constraints aren't met.
type GetRolesForUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRolesForUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRolesForUserResponseMultiError) AllErrors() []error { return m }

// GetRolesForUserResponseValidationError is the validation error returned by
// GetRolesForUserResponse.Validate if the designated constraints aren't met.
type GetRolesForUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRolesForUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRolesForUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRolesForUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRolesForUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRolesForUserResponseValidationError) ErrorName() string {
	return "GetRolesForUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRolesForUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRolesForUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRolesForUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRolesForUserResponseValidationError{}

// Validate checks the field values on AddRoleForUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddRoleForUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRoleForUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddRoleForUserRequestMultiError, or nil if none found.
func (m *AddRoleForUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRoleForUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if utf8.RuneCountInString(m.GetRole()) < 1 {
		err := AddRoleForUserRequestValidationError{
			field:  "Role",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddRoleForUserRequestMultiError(errors)
	}

	return nil
}

// AddRoleForUserRequestMultiError is an error wrapping multiple validation
// errors returned by AddRoleForUserRequest.ValidateAll() if the designated
// constraints aren't met.
type AddRoleForUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRoleForUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRoleForUserRequestMultiError) AllErrors() []error { return m }

// AddRoleForUserRequestValidationError is the validation error returned by
// AddRoleForUserRequest.Validate if the designated constraints aren't met.
type AddRoleForUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRoleForUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRoleForUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRoleForUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRoleForUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRoleForUserRequestValidationError) ErrorName() string {
	return "AddRoleForUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddRoleForUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRoleForUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRoleForUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRoleForUserRequestValidationError{}

// Validate checks the field values on AddRoleForUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddRoleForUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRoleForUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddRoleForUserResponseMultiError, or nil if none found.
func (m *AddRoleForUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRoleForUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Role

	if len(errors) > 0 {
		return AddRoleForUserResponseMultiError(errors)
	}

	return nil
}

// AddRoleForUserResponseMultiError is an error wrapping multiple validation
// errors returned by AddRoleForUserResponse.ValidateAll() if the designated
// constraints aren't met.
type AddRoleForUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRoleForUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRoleForUserResponseMultiError) AllErrors() []error { return m }

// AddRoleForUserResponseValidationError is the validation error returned by
// AddRoleForUserResponse.Validate if the designated constraints aren't met.
type AddRoleForUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRoleForUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRoleForUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRoleForUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRoleForUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRoleForUserResponseValidationError) ErrorName() string {
	return "AddRoleForUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddRoleForUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRoleForUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRoleForUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRoleForUserResponseValidationError{}

// Validate checks the field values on AddRolesForUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddRolesForUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRolesForUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddRolesForUserRequestMultiError, or nil if none found.
func (m *AddRolesForUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRolesForUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(m.GetRoles()) < 1 {
		err := AddRolesForUserRequestValidationError{
			field:  "Roles",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddRolesForUserRequestMultiError(errors)
	}

	return nil
}

// AddRolesForUserRequestMultiError is an error wrapping multiple validation
// errors returned by AddRolesForUserRequest.ValidateAll() if the designated
// constraints aren't met.
type AddRolesForUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRolesForUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRolesForUserRequestMultiError) AllErrors() []error { return m }

// AddRolesForUserRequestValidationError is the validation error returned by
// AddRolesForUserRequest.Validate if the designated constraints aren't met.
type AddRolesForUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRolesForUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRolesForUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRolesForUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRolesForUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRolesForUserRequestValidationError) ErrorName() string {
	return "AddRolesForUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddRolesForUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRolesForUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRolesForUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRolesForUserRequestValidationError{}

// Validate checks the field values on AddRolesForUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddRolesForUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRolesForUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddRolesForUserResponseMultiError, or nil if none found.
func (m *AddRolesForUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRolesForUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return AddRolesForUserResponseMultiError(errors)
	}

	return nil
}

// AddRolesForUserResponseMultiError is an error wrapping multiple validation
// errors returned by AddRolesForUserResponse.ValidateAll() if the designated
// constraints aren't met.
type AddRolesForUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRolesForUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRolesForUserResponseMultiError) AllErrors() []error { return m }

// AddRolesForUserResponseValidationError is the validation error returned by
// AddRolesForUserResponse.Validate if the designated constraints aren't met.
type AddRolesForUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRolesForUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRolesForUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRolesForUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRolesForUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRolesForUserResponseValidationError) ErrorName() string {
	return "AddRolesForUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddRolesForUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRolesForUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRolesForUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRolesForUserResponseValidationError{}

// Validate checks the field values on GetUsersForRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUsersForRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersForRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsersForRoleRequestMultiError, or nil if none found.
func (m *GetUsersForRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersForRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Role

	if len(errors) > 0 {
		return GetUsersForRoleRequestMultiError(errors)
	}

	return nil
}

// GetUsersForRoleRequestMultiError is an error wrapping multiple validation
// errors returned by GetUsersForRoleRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUsersForRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersForRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersForRoleRequestMultiError) AllErrors() []error { return m }

// GetUsersForRoleRequestValidationError is the validation error returned by
// GetUsersForRoleRequest.Validate if the designated constraints aren't met.
type GetUsersForRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersForRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersForRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersForRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersForRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersForRoleRequestValidationError) ErrorName() string {
	return "GetUsersForRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsersForRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersForRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersForRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersForRoleRequestValidationError{}

// Validate checks the field values on GetUsersForRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUsersForRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersForRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsersForRoleResponseMultiError, or nil if none found.
func (m *GetUsersForRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersForRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUsersForRoleResponseMultiError(errors)
	}

	return nil
}

// GetUsersForRoleResponseMultiError is an error wrapping multiple validation
// errors returned by GetUsersForRoleResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUsersForRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersForRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersForRoleResponseMultiError) AllErrors() []error { return m }

// GetUsersForRoleResponseValidationError is the validation error returned by
// GetUsersForRoleResponse.Validate if the designated constraints aren't met.
type GetUsersForRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersForRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersForRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersForRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersForRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersForRoleResponseValidationError) ErrorName() string {
	return "GetUsersForRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsersForRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersForRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersForRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersForRoleResponseValidationError{}

// Validate checks the field values on HasRoleForUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HasRoleForUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HasRoleForUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HasRoleForUserRequestMultiError, or nil if none found.
func (m *HasRoleForUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HasRoleForUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if utf8.RuneCountInString(m.GetRole()) < 1 {
		err := HasRoleForUserRequestValidationError{
			field:  "Role",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return HasRoleForUserRequestMultiError(errors)
	}

	return nil
}

// HasRoleForUserRequestMultiError is an error wrapping multiple validation
// errors returned by HasRoleForUserRequest.ValidateAll() if the designated
// constraints aren't met.
type HasRoleForUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HasRoleForUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HasRoleForUserRequestMultiError) AllErrors() []error { return m }

// HasRoleForUserRequestValidationError is the validation error returned by
// HasRoleForUserRequest.Validate if the designated constraints aren't met.
type HasRoleForUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HasRoleForUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HasRoleForUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HasRoleForUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HasRoleForUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HasRoleForUserRequestValidationError) ErrorName() string {
	return "HasRoleForUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e HasRoleForUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHasRoleForUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HasRoleForUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HasRoleForUserRequestValidationError{}

// Validate checks the field values on HasRoleForUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HasRoleForUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HasRoleForUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HasRoleForUserResponseMultiError, or nil if none found.
func (m *HasRoleForUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HasRoleForUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Has

	if len(errors) > 0 {
		return HasRoleForUserResponseMultiError(errors)
	}

	return nil
}

// HasRoleForUserResponseMultiError is an error wrapping multiple validation
// errors returned by HasRoleForUserResponse.ValidateAll() if the designated
// constraints aren't met.
type HasRoleForUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HasRoleForUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HasRoleForUserResponseMultiError) AllErrors() []error { return m }

// HasRoleForUserResponseValidationError is the validation error returned by
// HasRoleForUserResponse.Validate if the designated constraints aren't met.
type HasRoleForUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HasRoleForUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HasRoleForUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HasRoleForUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HasRoleForUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HasRoleForUserResponseValidationError) ErrorName() string {
	return "HasRoleForUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HasRoleForUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHasRoleForUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HasRoleForUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HasRoleForUserResponseValidationError{}

// Validate checks the field values on DeleteRoleForUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleForUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleForUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleForUserRequestMultiError, or nil if none found.
func (m *DeleteRoleForUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleForUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Role

	if len(errors) > 0 {
		return DeleteRoleForUserRequestMultiError(errors)
	}

	return nil
}

// DeleteRoleForUserRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteRoleForUserRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteRoleForUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleForUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleForUserRequestMultiError) AllErrors() []error { return m }

// DeleteRoleForUserRequestValidationError is the validation error returned by
// DeleteRoleForUserRequest.Validate if the designated constraints aren't met.
type DeleteRoleForUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleForUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleForUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleForUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleForUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleForUserRequestValidationError) ErrorName() string {
	return "DeleteRoleForUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleForUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleForUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleForUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleForUserRequestValidationError{}

// Validate checks the field values on DeleteRolesForUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRolesForUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRolesForUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRolesForUserRequestMultiError, or nil if none found.
func (m *DeleteRolesForUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRolesForUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return DeleteRolesForUserRequestMultiError(errors)
	}

	return nil
}

// DeleteRolesForUserRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteRolesForUserRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteRolesForUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRolesForUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRolesForUserRequestMultiError) AllErrors() []error { return m }

// DeleteRolesForUserRequestValidationError is the validation error returned by
// DeleteRolesForUserRequest.Validate if the designated constraints aren't met.
type DeleteRolesForUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRolesForUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRolesForUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRolesForUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRolesForUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRolesForUserRequestValidationError) ErrorName() string {
	return "DeleteRolesForUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRolesForUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRolesForUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRolesForUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRolesForUserRequestValidationError{}

// Validate checks the field values on DeleteUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserRequestMultiError, or nil if none found.
func (m *DeleteUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return DeleteUserRequestMultiError(errors)
	}

	return nil
}

// DeleteUserRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteUserRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserRequestMultiError) AllErrors() []error { return m }

// DeleteUserRequestValidationError is the validation error returned by
// DeleteUserRequest.Validate if the designated constraints aren't met.
type DeleteUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRequestValidationError) ErrorName() string {
	return "DeleteUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRequestValidationError{}

// Validate checks the field values on DeleteRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleRequestMultiError, or nil if none found.
func (m *DeleteRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Role

	if len(errors) > 0 {
		return DeleteRoleRequestMultiError(errors)
	}

	return nil
}

// DeleteRoleRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleRequestMultiError) AllErrors() []error { return m }

// DeleteRoleRequestValidationError is the validation error returned by
// DeleteRoleRequest.Validate if the designated constraints aren't met.
type DeleteRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleRequestValidationError) ErrorName() string {
	return "DeleteRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleRequestValidationError{}

// Validate checks the field values on DeletePermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePermissionRequestMultiError, or nil if none found.
func (m *DeletePermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Permission

	if len(errors) > 0 {
		return DeletePermissionRequestMultiError(errors)
	}

	return nil
}

// DeletePermissionRequestMultiError is an error wrapping multiple validation
// errors returned by DeletePermissionRequest.ValidateAll() if the designated
// constraints aren't met.
type DeletePermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePermissionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePermissionRequestMultiError) AllErrors() []error { return m }

// DeletePermissionRequestValidationError is the validation error returned by
// DeletePermissionRequest.Validate if the designated constraints aren't met.
type DeletePermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePermissionRequestValidationError) ErrorName() string {
	return "DeletePermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePermissionRequestValidationError{}

// Validate checks the field values on AddPermissionForUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddPermissionForUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPermissionForUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPermissionForUserRequestMultiError, or nil if none found.
func (m *AddPermissionForUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPermissionForUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for User

	if utf8.RuneCountInString(m.GetPermission()) < 1 {
		err := AddPermissionForUserRequestValidationError{
			field:  "Permission",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddPermissionForUserRequestMultiError(errors)
	}

	return nil
}

// AddPermissionForUserRequestMultiError is an error wrapping multiple
// validation errors returned by AddPermissionForUserRequest.ValidateAll() if
// the designated constraints aren't met.
type AddPermissionForUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPermissionForUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPermissionForUserRequestMultiError) AllErrors() []error { return m }

// AddPermissionForUserRequestValidationError is the validation error returned
// by AddPermissionForUserRequest.Validate if the designated constraints
// aren't met.
type AddPermissionForUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPermissionForUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPermissionForUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPermissionForUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPermissionForUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPermissionForUserRequestValidationError) ErrorName() string {
	return "AddPermissionForUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddPermissionForUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPermissionForUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPermissionForUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPermissionForUserRequestValidationError{}

// Validate checks the field values on AddPermissionForUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddPermissionForUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPermissionForUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPermissionForUserResponseMultiError, or nil if none found.
func (m *AddPermissionForUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPermissionForUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for User

	// no validation rules for Permission

	if len(errors) > 0 {
		return AddPermissionForUserResponseMultiError(errors)
	}

	return nil
}

// AddPermissionForUserResponseMultiError is an error wrapping multiple
// validation errors returned by AddPermissionForUserResponse.ValidateAll() if
// the designated constraints aren't met.
type AddPermissionForUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPermissionForUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPermissionForUserResponseMultiError) AllErrors() []error { return m }

// AddPermissionForUserResponseValidationError is the validation error returned
// by AddPermissionForUserResponse.Validate if the designated constraints
// aren't met.
type AddPermissionForUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPermissionForUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPermissionForUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPermissionForUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPermissionForUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPermissionForUserResponseValidationError) ErrorName() string {
	return "AddPermissionForUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddPermissionForUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPermissionForUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPermissionForUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPermissionForUserResponseValidationError{}

// Validate checks the field values on AddPermissionsForUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddPermissionsForUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPermissionsForUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPermissionsForUserRequestMultiError, or nil if none found.
func (m *AddPermissionsForUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPermissionsForUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for User

	if len(m.GetPermissions()) < 1 {
		err := AddPermissionsForUserRequestValidationError{
			field:  "Permissions",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddPermissionsForUserRequestMultiError(errors)
	}

	return nil
}

// AddPermissionsForUserRequestMultiError is an error wrapping multiple
// validation errors returned by AddPermissionsForUserRequest.ValidateAll() if
// the designated constraints aren't met.
type AddPermissionsForUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPermissionsForUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPermissionsForUserRequestMultiError) AllErrors() []error { return m }

// AddPermissionsForUserRequestValidationError is the validation error returned
// by AddPermissionsForUserRequest.Validate if the designated constraints
// aren't met.
type AddPermissionsForUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPermissionsForUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPermissionsForUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPermissionsForUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPermissionsForUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPermissionsForUserRequestValidationError) ErrorName() string {
	return "AddPermissionsForUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddPermissionsForUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPermissionsForUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPermissionsForUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPermissionsForUserRequestValidationError{}

// Validate checks the field values on AddPermissionsForUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddPermissionsForUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPermissionsForUserResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddPermissionsForUserResponseMultiError, or nil if none found.
func (m *AddPermissionsForUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPermissionsForUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for User

	if len(errors) > 0 {
		return AddPermissionsForUserResponseMultiError(errors)
	}

	return nil
}

// AddPermissionsForUserResponseMultiError is an error wrapping multiple
// validation errors returned by AddPermissionsForUserResponse.ValidateAll()
// if the designated constraints aren't met.
type AddPermissionsForUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPermissionsForUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPermissionsForUserResponseMultiError) AllErrors() []error { return m }

// AddPermissionsForUserResponseValidationError is the validation error
// returned by AddPermissionsForUserResponse.Validate if the designated
// constraints aren't met.
type AddPermissionsForUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPermissionsForUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPermissionsForUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPermissionsForUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPermissionsForUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPermissionsForUserResponseValidationError) ErrorName() string {
	return "AddPermissionsForUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddPermissionsForUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPermissionsForUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPermissionsForUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPermissionsForUserResponseValidationError{}

// Validate checks the field values on DeletePermissionForUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePermissionForUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePermissionForUserRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeletePermissionForUserRequestMultiError, or nil if none found.
func (m *DeletePermissionForUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePermissionForUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for User

	// no validation rules for Permission

	if len(errors) > 0 {
		return DeletePermissionForUserRequestMultiError(errors)
	}

	return nil
}

// DeletePermissionForUserRequestMultiError is an error wrapping multiple
// validation errors returned by DeletePermissionForUserRequest.ValidateAll()
// if the designated constraints aren't met.
type DeletePermissionForUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePermissionForUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePermissionForUserRequestMultiError) AllErrors() []error { return m }

// DeletePermissionForUserRequestValidationError is the validation error
// returned by DeletePermissionForUserRequest.Validate if the designated
// constraints aren't met.
type DeletePermissionForUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePermissionForUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePermissionForUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePermissionForUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePermissionForUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePermissionForUserRequestValidationError) ErrorName() string {
	return "DeletePermissionForUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePermissionForUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePermissionForUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePermissionForUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePermissionForUserRequestValidationError{}

// Validate checks the field values on DeletePermissionsForUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePermissionsForUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePermissionsForUserRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeletePermissionsForUserRequestMultiError, or nil if none found.
func (m *DeletePermissionsForUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePermissionsForUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for User

	if len(errors) > 0 {
		return DeletePermissionsForUserRequestMultiError(errors)
	}

	return nil
}

// DeletePermissionsForUserRequestMultiError is an error wrapping multiple
// validation errors returned by DeletePermissionsForUserRequest.ValidateAll()
// if the designated constraints aren't met.
type DeletePermissionsForUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePermissionsForUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePermissionsForUserRequestMultiError) AllErrors() []error { return m }

// DeletePermissionsForUserRequestValidationError is the validation error
// returned by DeletePermissionsForUserRequest.Validate if the designated
// constraints aren't met.
type DeletePermissionsForUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePermissionsForUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePermissionsForUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePermissionsForUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePermissionsForUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePermissionsForUserRequestValidationError) ErrorName() string {
	return "DeletePermissionsForUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePermissionsForUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePermissionsForUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePermissionsForUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePermissionsForUserRequestValidationError{}

// Validate checks the field values on GetPermissionsForUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPermissionsForUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPermissionsForUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPermissionsForUserRequestMultiError, or nil if none found.
func (m *GetPermissionsForUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPermissionsForUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for User

	if len(errors) > 0 {
		return GetPermissionsForUserRequestMultiError(errors)
	}

	return nil
}

// GetPermissionsForUserRequestMultiError is an error wrapping multiple
// validation errors returned by GetPermissionsForUserRequest.ValidateAll() if
// the designated constraints aren't met.
type GetPermissionsForUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPermissionsForUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPermissionsForUserRequestMultiError) AllErrors() []error { return m }

// GetPermissionsForUserRequestValidationError is the validation error returned
// by GetPermissionsForUserRequest.Validate if the designated constraints
// aren't met.
type GetPermissionsForUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPermissionsForUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPermissionsForUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPermissionsForUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPermissionsForUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPermissionsForUserRequestValidationError) ErrorName() string {
	return "GetPermissionsForUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPermissionsForUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPermissionsForUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPermissionsForUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPermissionsForUserRequestValidationError{}

// Validate checks the field values on GetPermissionsForUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPermissionsForUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPermissionsForUserResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPermissionsForUserResponseMultiError, or nil if none found.
func (m *GetPermissionsForUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPermissionsForUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetPermissionsForUserResponseMultiError(errors)
	}

	return nil
}

// GetPermissionsForUserResponseMultiError is an error wrapping multiple
// validation errors returned by GetPermissionsForUserResponse.ValidateAll()
// if the designated constraints aren't met.
type GetPermissionsForUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPermissionsForUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPermissionsForUserResponseMultiError) AllErrors() []error { return m }

// GetPermissionsForUserResponseValidationError is the validation error
// returned by GetPermissionsForUserResponse.Validate if the designated
// constraints aren't met.
type GetPermissionsForUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPermissionsForUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPermissionsForUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPermissionsForUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPermissionsForUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPermissionsForUserResponseValidationError) ErrorName() string {
	return "GetPermissionsForUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPermissionsForUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPermissionsForUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPermissionsForUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPermissionsForUserResponseValidationError{}

// Validate checks the field values on HasPermissionForUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HasPermissionForUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HasPermissionForUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HasPermissionForUserRequestMultiError, or nil if none found.
func (m *HasPermissionForUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HasPermissionForUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for User

	if utf8.RuneCountInString(m.GetPermission()) < 1 {
		err := HasPermissionForUserRequestValidationError{
			field:  "Permission",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return HasPermissionForUserRequestMultiError(errors)
	}

	return nil
}

// HasPermissionForUserRequestMultiError is an error wrapping multiple
// validation errors returned by HasPermissionForUserRequest.ValidateAll() if
// the designated constraints aren't met.
type HasPermissionForUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HasPermissionForUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HasPermissionForUserRequestMultiError) AllErrors() []error { return m }

// HasPermissionForUserRequestValidationError is the validation error returned
// by HasPermissionForUserRequest.Validate if the designated constraints
// aren't met.
type HasPermissionForUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HasPermissionForUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HasPermissionForUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HasPermissionForUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HasPermissionForUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HasPermissionForUserRequestValidationError) ErrorName() string {
	return "HasPermissionForUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e HasPermissionForUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHasPermissionForUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HasPermissionForUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HasPermissionForUserRequestValidationError{}

// Validate checks the field values on HasPermissionForUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HasPermissionForUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HasPermissionForUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HasPermissionForUserResponseMultiError, or nil if none found.
func (m *HasPermissionForUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HasPermissionForUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Has

	if len(errors) > 0 {
		return HasPermissionForUserResponseMultiError(errors)
	}

	return nil
}

// HasPermissionForUserResponseMultiError is an error wrapping multiple
// validation errors returned by HasPermissionForUserResponse.ValidateAll() if
// the designated constraints aren't met.
type HasPermissionForUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HasPermissionForUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HasPermissionForUserResponseMultiError) AllErrors() []error { return m }

// HasPermissionForUserResponseValidationError is the validation error returned
// by HasPermissionForUserResponse.Validate if the designated constraints
// aren't met.
type HasPermissionForUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HasPermissionForUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HasPermissionForUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HasPermissionForUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HasPermissionForUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HasPermissionForUserResponseValidationError) ErrorName() string {
	return "HasPermissionForUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HasPermissionForUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHasPermissionForUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HasPermissionForUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HasPermissionForUserResponseValidationError{}
