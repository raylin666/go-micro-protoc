// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.0
// - protoc             v3.15.8
// source: user/v1/auth_control.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAuthControlAddPermissionForUser = "/user.v1.AuthControl/AddPermissionForUser"
const OperationAuthControlAddPermissionsForUser = "/user.v1.AuthControl/AddPermissionsForUser"
const OperationAuthControlAddRoleForUser = "/user.v1.AuthControl/AddRoleForUser"
const OperationAuthControlAddRolesForUser = "/user.v1.AuthControl/AddRolesForUser"
const OperationAuthControlDeletePermission = "/user.v1.AuthControl/DeletePermission"
const OperationAuthControlDeletePermissionForUser = "/user.v1.AuthControl/DeletePermissionForUser"
const OperationAuthControlDeletePermissionsForUser = "/user.v1.AuthControl/DeletePermissionsForUser"
const OperationAuthControlDeleteRole = "/user.v1.AuthControl/DeleteRole"
const OperationAuthControlDeleteRoleForUser = "/user.v1.AuthControl/DeleteRoleForUser"
const OperationAuthControlDeleteRolesForUser = "/user.v1.AuthControl/DeleteRolesForUser"
const OperationAuthControlDeleteUser = "/user.v1.AuthControl/DeleteUser"
const OperationAuthControlGetPermissionsForUser = "/user.v1.AuthControl/GetPermissionsForUser"
const OperationAuthControlGetRolesForUser = "/user.v1.AuthControl/GetRolesForUser"
const OperationAuthControlGetUsersForRole = "/user.v1.AuthControl/GetUsersForRole"
const OperationAuthControlHasPermissionForUser = "/user.v1.AuthControl/HasPermissionForUser"
const OperationAuthControlHasRoleForUser = "/user.v1.AuthControl/HasRoleForUser"

type AuthControlHTTPServer interface {
	AddPermissionForUser(context.Context, *AddPermissionForUserRequest) (*AddPermissionForUserResponse, error)
	AddPermissionsForUser(context.Context, *AddPermissionsForUserRequest) (*AddPermissionsForUserResponse, error)
	AddRoleForUser(context.Context, *AddRoleForUserRequest) (*AddRoleForUserResponse, error)
	AddRolesForUser(context.Context, *AddRolesForUserRequest) (*AddRolesForUserResponse, error)
	DeletePermission(context.Context, *DeletePermissionRequest) (*emptypb.Empty, error)
	DeletePermissionForUser(context.Context, *DeletePermissionForUserRequest) (*emptypb.Empty, error)
	DeletePermissionsForUser(context.Context, *DeletePermissionsForUserRequest) (*emptypb.Empty, error)
	DeleteRole(context.Context, *DeleteRoleRequest) (*emptypb.Empty, error)
	DeleteRoleForUser(context.Context, *DeleteRoleForUserRequest) (*emptypb.Empty, error)
	DeleteRolesForUser(context.Context, *DeleteRolesForUserRequest) (*emptypb.Empty, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error)
	GetPermissionsForUser(context.Context, *GetPermissionsForUserRequest) (*GetPermissionsForUserResponse, error)
	GetRolesForUser(context.Context, *GetRolesForUserRequest) (*GetRolesForUserResponse, error)
	GetUsersForRole(context.Context, *GetUsersForRoleRequest) (*GetUsersForRoleResponse, error)
	HasPermissionForUser(context.Context, *HasPermissionForUserRequest) (*HasPermissionForUserResponse, error)
	HasRoleForUser(context.Context, *HasRoleForUserRequest) (*HasRoleForUserResponse, error)
}

func RegisterAuthControlHTTPServer(s *http.Server, srv AuthControlHTTPServer) {
	r := s.Route("/")
	r.GET("/auth_control/user/{user_id}/roles", _AuthControl_GetRolesForUser0_HTTP_Handler(srv))
	r.POST("/auth_control/user/{user_id}/add_role", _AuthControl_AddRoleForUser0_HTTP_Handler(srv))
	r.POST("/auth_control/user/{user_id}/add_roles", _AuthControl_AddRolesForUser0_HTTP_Handler(srv))
	r.GET("/auth_control/role/{role}/users", _AuthControl_GetUsersForRole0_HTTP_Handler(srv))
	r.GET("/auth_control/has_role/{user_id}/{role}", _AuthControl_HasRoleForUser0_HTTP_Handler(srv))
	r.DELETE("/auth_control/delete_role/{user_id}/{role}", _AuthControl_DeleteRoleForUser0_HTTP_Handler(srv))
	r.DELETE("/auth_control/delete_roles/{user_id}", _AuthControl_DeleteRolesForUser0_HTTP_Handler(srv))
	r.DELETE("/auth_control/user/delete/{user_id}", _AuthControl_DeleteUser0_HTTP_Handler(srv))
	r.DELETE("/auth_control/role/delete/{role}", _AuthControl_DeleteRole0_HTTP_Handler(srv))
	r.DELETE("/auth_control/permission/delete/{permission}", _AuthControl_DeletePermission0_HTTP_Handler(srv))
	r.POST("/auth_control/user/{user}/add_permission", _AuthControl_AddPermissionForUser0_HTTP_Handler(srv))
	r.POST("/auth_control/user/{user}/add_permissions", _AuthControl_AddPermissionsForUser0_HTTP_Handler(srv))
	r.DELETE("/auth_control/delete_permission/{user}/{permission}", _AuthControl_DeletePermissionForUser0_HTTP_Handler(srv))
	r.DELETE("/auth_control/user/delete_permissions/{user}", _AuthControl_DeletePermissionsForUser0_HTTP_Handler(srv))
	r.GET("/auth_control/user/{user}/permissions", _AuthControl_GetPermissionsForUser0_HTTP_Handler(srv))
	r.GET("/auth_control/has_permission/{user}", _AuthControl_HasPermissionForUser0_HTTP_Handler(srv))
}

func _AuthControl_GetRolesForUser0_HTTP_Handler(srv AuthControlHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRolesForUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthControlGetRolesForUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRolesForUser(ctx, req.(*GetRolesForUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRolesForUserResponse)
		return ctx.Result(200, reply)
	}
}

func _AuthControl_AddRoleForUser0_HTTP_Handler(srv AuthControlHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddRoleForUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthControlAddRoleForUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddRoleForUser(ctx, req.(*AddRoleForUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddRoleForUserResponse)
		return ctx.Result(200, reply)
	}
}

func _AuthControl_AddRolesForUser0_HTTP_Handler(srv AuthControlHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddRolesForUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthControlAddRolesForUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddRolesForUser(ctx, req.(*AddRolesForUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddRolesForUserResponse)
		return ctx.Result(200, reply)
	}
}

func _AuthControl_GetUsersForRole0_HTTP_Handler(srv AuthControlHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUsersForRoleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthControlGetUsersForRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUsersForRole(ctx, req.(*GetUsersForRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUsersForRoleResponse)
		return ctx.Result(200, reply)
	}
}

func _AuthControl_HasRoleForUser0_HTTP_Handler(srv AuthControlHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HasRoleForUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthControlHasRoleForUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HasRoleForUser(ctx, req.(*HasRoleForUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HasRoleForUserResponse)
		return ctx.Result(200, reply)
	}
}

func _AuthControl_DeleteRoleForUser0_HTTP_Handler(srv AuthControlHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRoleForUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthControlDeleteRoleForUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRoleForUser(ctx, req.(*DeleteRoleForUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _AuthControl_DeleteRolesForUser0_HTTP_Handler(srv AuthControlHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRolesForUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthControlDeleteRolesForUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRolesForUser(ctx, req.(*DeleteRolesForUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _AuthControl_DeleteUser0_HTTP_Handler(srv AuthControlHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthControlDeleteUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteUser(ctx, req.(*DeleteUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _AuthControl_DeleteRole0_HTTP_Handler(srv AuthControlHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRoleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthControlDeleteRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRole(ctx, req.(*DeleteRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _AuthControl_DeletePermission0_HTTP_Handler(srv AuthControlHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeletePermissionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthControlDeletePermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePermission(ctx, req.(*DeletePermissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _AuthControl_AddPermissionForUser0_HTTP_Handler(srv AuthControlHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddPermissionForUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthControlAddPermissionForUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddPermissionForUser(ctx, req.(*AddPermissionForUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddPermissionForUserResponse)
		return ctx.Result(200, reply)
	}
}

func _AuthControl_AddPermissionsForUser0_HTTP_Handler(srv AuthControlHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddPermissionsForUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthControlAddPermissionsForUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddPermissionsForUser(ctx, req.(*AddPermissionsForUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddPermissionsForUserResponse)
		return ctx.Result(200, reply)
	}
}

func _AuthControl_DeletePermissionForUser0_HTTP_Handler(srv AuthControlHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeletePermissionForUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthControlDeletePermissionForUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePermissionForUser(ctx, req.(*DeletePermissionForUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _AuthControl_DeletePermissionsForUser0_HTTP_Handler(srv AuthControlHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeletePermissionsForUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthControlDeletePermissionsForUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePermissionsForUser(ctx, req.(*DeletePermissionsForUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _AuthControl_GetPermissionsForUser0_HTTP_Handler(srv AuthControlHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPermissionsForUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthControlGetPermissionsForUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPermissionsForUser(ctx, req.(*GetPermissionsForUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPermissionsForUserResponse)
		return ctx.Result(200, reply)
	}
}

func _AuthControl_HasPermissionForUser0_HTTP_Handler(srv AuthControlHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HasPermissionForUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthControlHasPermissionForUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HasPermissionForUser(ctx, req.(*HasPermissionForUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HasPermissionForUserResponse)
		return ctx.Result(200, reply)
	}
}

type AuthControlHTTPClient interface {
	AddPermissionForUser(ctx context.Context, req *AddPermissionForUserRequest, opts ...http.CallOption) (rsp *AddPermissionForUserResponse, err error)
	AddPermissionsForUser(ctx context.Context, req *AddPermissionsForUserRequest, opts ...http.CallOption) (rsp *AddPermissionsForUserResponse, err error)
	AddRoleForUser(ctx context.Context, req *AddRoleForUserRequest, opts ...http.CallOption) (rsp *AddRoleForUserResponse, err error)
	AddRolesForUser(ctx context.Context, req *AddRolesForUserRequest, opts ...http.CallOption) (rsp *AddRolesForUserResponse, err error)
	DeletePermission(ctx context.Context, req *DeletePermissionRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeletePermissionForUser(ctx context.Context, req *DeletePermissionForUserRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeletePermissionsForUser(ctx context.Context, req *DeletePermissionsForUserRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteRole(ctx context.Context, req *DeleteRoleRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteRoleForUser(ctx context.Context, req *DeleteRoleForUserRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteRolesForUser(ctx context.Context, req *DeleteRolesForUserRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteUser(ctx context.Context, req *DeleteUserRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetPermissionsForUser(ctx context.Context, req *GetPermissionsForUserRequest, opts ...http.CallOption) (rsp *GetPermissionsForUserResponse, err error)
	GetRolesForUser(ctx context.Context, req *GetRolesForUserRequest, opts ...http.CallOption) (rsp *GetRolesForUserResponse, err error)
	GetUsersForRole(ctx context.Context, req *GetUsersForRoleRequest, opts ...http.CallOption) (rsp *GetUsersForRoleResponse, err error)
	HasPermissionForUser(ctx context.Context, req *HasPermissionForUserRequest, opts ...http.CallOption) (rsp *HasPermissionForUserResponse, err error)
	HasRoleForUser(ctx context.Context, req *HasRoleForUserRequest, opts ...http.CallOption) (rsp *HasRoleForUserResponse, err error)
}

type AuthControlHTTPClientImpl struct {
	cc *http.Client
}

func NewAuthControlHTTPClient(client *http.Client) AuthControlHTTPClient {
	return &AuthControlHTTPClientImpl{client}
}

func (c *AuthControlHTTPClientImpl) AddPermissionForUser(ctx context.Context, in *AddPermissionForUserRequest, opts ...http.CallOption) (*AddPermissionForUserResponse, error) {
	var out AddPermissionForUserResponse
	pattern := "/auth_control/user/{user}/add_permission"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthControlAddPermissionForUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthControlHTTPClientImpl) AddPermissionsForUser(ctx context.Context, in *AddPermissionsForUserRequest, opts ...http.CallOption) (*AddPermissionsForUserResponse, error) {
	var out AddPermissionsForUserResponse
	pattern := "/auth_control/user/{user}/add_permissions"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthControlAddPermissionsForUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthControlHTTPClientImpl) AddRoleForUser(ctx context.Context, in *AddRoleForUserRequest, opts ...http.CallOption) (*AddRoleForUserResponse, error) {
	var out AddRoleForUserResponse
	pattern := "/auth_control/user/{user_id}/add_role"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthControlAddRoleForUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthControlHTTPClientImpl) AddRolesForUser(ctx context.Context, in *AddRolesForUserRequest, opts ...http.CallOption) (*AddRolesForUserResponse, error) {
	var out AddRolesForUserResponse
	pattern := "/auth_control/user/{user_id}/add_roles"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthControlAddRolesForUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthControlHTTPClientImpl) DeletePermission(ctx context.Context, in *DeletePermissionRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/auth_control/permission/delete/{permission}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthControlDeletePermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthControlHTTPClientImpl) DeletePermissionForUser(ctx context.Context, in *DeletePermissionForUserRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/auth_control/delete_permission/{user}/{permission}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthControlDeletePermissionForUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthControlHTTPClientImpl) DeletePermissionsForUser(ctx context.Context, in *DeletePermissionsForUserRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/auth_control/user/delete_permissions/{user}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthControlDeletePermissionsForUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthControlHTTPClientImpl) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/auth_control/role/delete/{role}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthControlDeleteRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthControlHTTPClientImpl) DeleteRoleForUser(ctx context.Context, in *DeleteRoleForUserRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/auth_control/delete_role/{user_id}/{role}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthControlDeleteRoleForUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthControlHTTPClientImpl) DeleteRolesForUser(ctx context.Context, in *DeleteRolesForUserRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/auth_control/delete_roles/{user_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthControlDeleteRolesForUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthControlHTTPClientImpl) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/auth_control/user/delete/{user_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthControlDeleteUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthControlHTTPClientImpl) GetPermissionsForUser(ctx context.Context, in *GetPermissionsForUserRequest, opts ...http.CallOption) (*GetPermissionsForUserResponse, error) {
	var out GetPermissionsForUserResponse
	pattern := "/auth_control/user/{user}/permissions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthControlGetPermissionsForUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthControlHTTPClientImpl) GetRolesForUser(ctx context.Context, in *GetRolesForUserRequest, opts ...http.CallOption) (*GetRolesForUserResponse, error) {
	var out GetRolesForUserResponse
	pattern := "/auth_control/user/{user_id}/roles"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthControlGetRolesForUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthControlHTTPClientImpl) GetUsersForRole(ctx context.Context, in *GetUsersForRoleRequest, opts ...http.CallOption) (*GetUsersForRoleResponse, error) {
	var out GetUsersForRoleResponse
	pattern := "/auth_control/role/{role}/users"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthControlGetUsersForRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthControlHTTPClientImpl) HasPermissionForUser(ctx context.Context, in *HasPermissionForUserRequest, opts ...http.CallOption) (*HasPermissionForUserResponse, error) {
	var out HasPermissionForUserResponse
	pattern := "/auth_control/has_permission/{user}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthControlHasPermissionForUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthControlHTTPClientImpl) HasRoleForUser(ctx context.Context, in *HasRoleForUserRequest, opts ...http.CallOption) (*HasRoleForUserResponse, error) {
	var out HasRoleForUserResponse
	pattern := "/auth_control/has_role/{user_id}/{role}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthControlHasRoleForUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
