// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: user/v1/auth_control.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthControlClient is the client API for AuthControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthControlClient interface {
	// 获取用户具有的角色
	GetRolesForUser(ctx context.Context, in *GetRolesForUserRequest, opts ...grpc.CallOption) (*GetRolesForUserResponse, error)
	// 用户添加角色
	AddRoleForUser(ctx context.Context, in *AddRoleForUserRequest, opts ...grpc.CallOption) (*AddRoleForUserResponse, error)
	// 用户添加多个角色
	AddRolesForUser(ctx context.Context, in *AddRolesForUserRequest, opts ...grpc.CallOption) (*AddRolesForUserResponse, error)
	// 获取具有角色的用户
	GetUsersForRole(ctx context.Context, in *GetUsersForRoleRequest, opts ...grpc.CallOption) (*GetUsersForRoleResponse, error)
	// 确定用户是否具有角色
	HasRoleForUser(ctx context.Context, in *HasRoleForUserRequest, opts ...grpc.CallOption) (*HasRoleForUserResponse, error)
	// 删除用户的角色
	DeleteRoleForUser(ctx context.Context, in *DeleteRoleForUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除用户的所有角色
	DeleteRolesForUser(ctx context.Context, in *DeleteRolesForUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除用户
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除角色
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除权限
	DeletePermission(ctx context.Context, in *DeletePermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 为用户或角色添加权限
	AddPermissionForUser(ctx context.Context, in *AddPermissionForUserRequest, opts ...grpc.CallOption) (*AddPermissionForUserResponse, error)
	// 为用户或角色添加多个权限
	AddPermissionsForUser(ctx context.Context, in *AddPermissionsForUserRequest, opts ...grpc.CallOption) (*AddPermissionsForUserResponse, error)
	// 删除用户或角色的权限
	DeletePermissionForUser(ctx context.Context, in *DeletePermissionForUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除用户或角色的所有权限
	DeletePermissionsForUser(ctx context.Context, in *DeletePermissionsForUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取用户或角色的权限
	GetPermissionsForUser(ctx context.Context, in *GetPermissionsForUserRequest, opts ...grpc.CallOption) (*GetPermissionsForUserResponse, error)
	// 确定用户是否具有权限
	HasPermissionForUser(ctx context.Context, in *HasPermissionForUserRequest, opts ...grpc.CallOption) (*HasPermissionForUserResponse, error)
}

type authControlClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthControlClient(cc grpc.ClientConnInterface) AuthControlClient {
	return &authControlClient{cc}
}

func (c *authControlClient) GetRolesForUser(ctx context.Context, in *GetRolesForUserRequest, opts ...grpc.CallOption) (*GetRolesForUserResponse, error) {
	out := new(GetRolesForUserResponse)
	err := c.cc.Invoke(ctx, "/user.v1.AuthControl/GetRolesForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authControlClient) AddRoleForUser(ctx context.Context, in *AddRoleForUserRequest, opts ...grpc.CallOption) (*AddRoleForUserResponse, error) {
	out := new(AddRoleForUserResponse)
	err := c.cc.Invoke(ctx, "/user.v1.AuthControl/AddRoleForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authControlClient) AddRolesForUser(ctx context.Context, in *AddRolesForUserRequest, opts ...grpc.CallOption) (*AddRolesForUserResponse, error) {
	out := new(AddRolesForUserResponse)
	err := c.cc.Invoke(ctx, "/user.v1.AuthControl/AddRolesForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authControlClient) GetUsersForRole(ctx context.Context, in *GetUsersForRoleRequest, opts ...grpc.CallOption) (*GetUsersForRoleResponse, error) {
	out := new(GetUsersForRoleResponse)
	err := c.cc.Invoke(ctx, "/user.v1.AuthControl/GetUsersForRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authControlClient) HasRoleForUser(ctx context.Context, in *HasRoleForUserRequest, opts ...grpc.CallOption) (*HasRoleForUserResponse, error) {
	out := new(HasRoleForUserResponse)
	err := c.cc.Invoke(ctx, "/user.v1.AuthControl/HasRoleForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authControlClient) DeleteRoleForUser(ctx context.Context, in *DeleteRoleForUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.AuthControl/DeleteRoleForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authControlClient) DeleteRolesForUser(ctx context.Context, in *DeleteRolesForUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.AuthControl/DeleteRolesForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authControlClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.AuthControl/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authControlClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.AuthControl/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authControlClient) DeletePermission(ctx context.Context, in *DeletePermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.AuthControl/DeletePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authControlClient) AddPermissionForUser(ctx context.Context, in *AddPermissionForUserRequest, opts ...grpc.CallOption) (*AddPermissionForUserResponse, error) {
	out := new(AddPermissionForUserResponse)
	err := c.cc.Invoke(ctx, "/user.v1.AuthControl/AddPermissionForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authControlClient) AddPermissionsForUser(ctx context.Context, in *AddPermissionsForUserRequest, opts ...grpc.CallOption) (*AddPermissionsForUserResponse, error) {
	out := new(AddPermissionsForUserResponse)
	err := c.cc.Invoke(ctx, "/user.v1.AuthControl/AddPermissionsForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authControlClient) DeletePermissionForUser(ctx context.Context, in *DeletePermissionForUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.AuthControl/DeletePermissionForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authControlClient) DeletePermissionsForUser(ctx context.Context, in *DeletePermissionsForUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.AuthControl/DeletePermissionsForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authControlClient) GetPermissionsForUser(ctx context.Context, in *GetPermissionsForUserRequest, opts ...grpc.CallOption) (*GetPermissionsForUserResponse, error) {
	out := new(GetPermissionsForUserResponse)
	err := c.cc.Invoke(ctx, "/user.v1.AuthControl/GetPermissionsForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authControlClient) HasPermissionForUser(ctx context.Context, in *HasPermissionForUserRequest, opts ...grpc.CallOption) (*HasPermissionForUserResponse, error) {
	out := new(HasPermissionForUserResponse)
	err := c.cc.Invoke(ctx, "/user.v1.AuthControl/HasPermissionForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthControlServer is the server API for AuthControl service.
// All implementations must embed UnimplementedAuthControlServer
// for forward compatibility
type AuthControlServer interface {
	// 获取用户具有的角色
	GetRolesForUser(context.Context, *GetRolesForUserRequest) (*GetRolesForUserResponse, error)
	// 用户添加角色
	AddRoleForUser(context.Context, *AddRoleForUserRequest) (*AddRoleForUserResponse, error)
	// 用户添加多个角色
	AddRolesForUser(context.Context, *AddRolesForUserRequest) (*AddRolesForUserResponse, error)
	// 获取具有角色的用户
	GetUsersForRole(context.Context, *GetUsersForRoleRequest) (*GetUsersForRoleResponse, error)
	// 确定用户是否具有角色
	HasRoleForUser(context.Context, *HasRoleForUserRequest) (*HasRoleForUserResponse, error)
	// 删除用户的角色
	DeleteRoleForUser(context.Context, *DeleteRoleForUserRequest) (*emptypb.Empty, error)
	// 删除用户的所有角色
	DeleteRolesForUser(context.Context, *DeleteRolesForUserRequest) (*emptypb.Empty, error)
	// 删除用户
	DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error)
	// 删除角色
	DeleteRole(context.Context, *DeleteRoleRequest) (*emptypb.Empty, error)
	// 删除权限
	DeletePermission(context.Context, *DeletePermissionRequest) (*emptypb.Empty, error)
	// 为用户或角色添加权限
	AddPermissionForUser(context.Context, *AddPermissionForUserRequest) (*AddPermissionForUserResponse, error)
	// 为用户或角色添加多个权限
	AddPermissionsForUser(context.Context, *AddPermissionsForUserRequest) (*AddPermissionsForUserResponse, error)
	// 删除用户或角色的权限
	DeletePermissionForUser(context.Context, *DeletePermissionForUserRequest) (*emptypb.Empty, error)
	// 删除用户或角色的所有权限
	DeletePermissionsForUser(context.Context, *DeletePermissionsForUserRequest) (*emptypb.Empty, error)
	// 获取用户或角色的权限
	GetPermissionsForUser(context.Context, *GetPermissionsForUserRequest) (*GetPermissionsForUserResponse, error)
	// 确定用户是否具有权限
	HasPermissionForUser(context.Context, *HasPermissionForUserRequest) (*HasPermissionForUserResponse, error)
	mustEmbedUnimplementedAuthControlServer()
}

// UnimplementedAuthControlServer must be embedded to have forward compatible implementations.
type UnimplementedAuthControlServer struct {
}

func (UnimplementedAuthControlServer) GetRolesForUser(context.Context, *GetRolesForUserRequest) (*GetRolesForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolesForUser not implemented")
}
func (UnimplementedAuthControlServer) AddRoleForUser(context.Context, *AddRoleForUserRequest) (*AddRoleForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoleForUser not implemented")
}
func (UnimplementedAuthControlServer) AddRolesForUser(context.Context, *AddRolesForUserRequest) (*AddRolesForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRolesForUser not implemented")
}
func (UnimplementedAuthControlServer) GetUsersForRole(context.Context, *GetUsersForRoleRequest) (*GetUsersForRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersForRole not implemented")
}
func (UnimplementedAuthControlServer) HasRoleForUser(context.Context, *HasRoleForUserRequest) (*HasRoleForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasRoleForUser not implemented")
}
func (UnimplementedAuthControlServer) DeleteRoleForUser(context.Context, *DeleteRoleForUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleForUser not implemented")
}
func (UnimplementedAuthControlServer) DeleteRolesForUser(context.Context, *DeleteRolesForUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRolesForUser not implemented")
}
func (UnimplementedAuthControlServer) DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedAuthControlServer) DeleteRole(context.Context, *DeleteRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedAuthControlServer) DeletePermission(context.Context, *DeletePermissionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermission not implemented")
}
func (UnimplementedAuthControlServer) AddPermissionForUser(context.Context, *AddPermissionForUserRequest) (*AddPermissionForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPermissionForUser not implemented")
}
func (UnimplementedAuthControlServer) AddPermissionsForUser(context.Context, *AddPermissionsForUserRequest) (*AddPermissionsForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPermissionsForUser not implemented")
}
func (UnimplementedAuthControlServer) DeletePermissionForUser(context.Context, *DeletePermissionForUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermissionForUser not implemented")
}
func (UnimplementedAuthControlServer) DeletePermissionsForUser(context.Context, *DeletePermissionsForUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermissionsForUser not implemented")
}
func (UnimplementedAuthControlServer) GetPermissionsForUser(context.Context, *GetPermissionsForUserRequest) (*GetPermissionsForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissionsForUser not implemented")
}
func (UnimplementedAuthControlServer) HasPermissionForUser(context.Context, *HasPermissionForUserRequest) (*HasPermissionForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasPermissionForUser not implemented")
}
func (UnimplementedAuthControlServer) mustEmbedUnimplementedAuthControlServer() {}

// UnsafeAuthControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthControlServer will
// result in compilation errors.
type UnsafeAuthControlServer interface {
	mustEmbedUnimplementedAuthControlServer()
}

func RegisterAuthControlServer(s grpc.ServiceRegistrar, srv AuthControlServer) {
	s.RegisterService(&AuthControl_ServiceDesc, srv)
}

func _AuthControl_GetRolesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolesForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthControlServer).GetRolesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.AuthControl/GetRolesForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthControlServer).GetRolesForUser(ctx, req.(*GetRolesForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthControl_AddRoleForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthControlServer).AddRoleForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.AuthControl/AddRoleForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthControlServer).AddRoleForUser(ctx, req.(*AddRoleForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthControl_AddRolesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRolesForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthControlServer).AddRolesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.AuthControl/AddRolesForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthControlServer).AddRolesForUser(ctx, req.(*AddRolesForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthControl_GetUsersForRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersForRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthControlServer).GetUsersForRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.AuthControl/GetUsersForRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthControlServer).GetUsersForRole(ctx, req.(*GetUsersForRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthControl_HasRoleForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasRoleForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthControlServer).HasRoleForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.AuthControl/HasRoleForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthControlServer).HasRoleForUser(ctx, req.(*HasRoleForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthControl_DeleteRoleForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthControlServer).DeleteRoleForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.AuthControl/DeleteRoleForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthControlServer).DeleteRoleForUser(ctx, req.(*DeleteRoleForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthControl_DeleteRolesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRolesForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthControlServer).DeleteRolesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.AuthControl/DeleteRolesForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthControlServer).DeleteRolesForUser(ctx, req.(*DeleteRolesForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthControl_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthControlServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.AuthControl/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthControlServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthControl_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthControlServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.AuthControl/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthControlServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthControl_DeletePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthControlServer).DeletePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.AuthControl/DeletePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthControlServer).DeletePermission(ctx, req.(*DeletePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthControl_AddPermissionForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPermissionForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthControlServer).AddPermissionForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.AuthControl/AddPermissionForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthControlServer).AddPermissionForUser(ctx, req.(*AddPermissionForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthControl_AddPermissionsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPermissionsForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthControlServer).AddPermissionsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.AuthControl/AddPermissionsForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthControlServer).AddPermissionsForUser(ctx, req.(*AddPermissionsForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthControl_DeletePermissionForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePermissionForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthControlServer).DeletePermissionForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.AuthControl/DeletePermissionForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthControlServer).DeletePermissionForUser(ctx, req.(*DeletePermissionForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthControl_DeletePermissionsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePermissionsForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthControlServer).DeletePermissionsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.AuthControl/DeletePermissionsForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthControlServer).DeletePermissionsForUser(ctx, req.(*DeletePermissionsForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthControl_GetPermissionsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionsForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthControlServer).GetPermissionsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.AuthControl/GetPermissionsForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthControlServer).GetPermissionsForUser(ctx, req.(*GetPermissionsForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthControl_HasPermissionForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasPermissionForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthControlServer).HasPermissionForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.AuthControl/HasPermissionForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthControlServer).HasPermissionForUser(ctx, req.(*HasPermissionForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthControl_ServiceDesc is the grpc.ServiceDesc for AuthControl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthControl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.v1.AuthControl",
	HandlerType: (*AuthControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRolesForUser",
			Handler:    _AuthControl_GetRolesForUser_Handler,
		},
		{
			MethodName: "AddRoleForUser",
			Handler:    _AuthControl_AddRoleForUser_Handler,
		},
		{
			MethodName: "AddRolesForUser",
			Handler:    _AuthControl_AddRolesForUser_Handler,
		},
		{
			MethodName: "GetUsersForRole",
			Handler:    _AuthControl_GetUsersForRole_Handler,
		},
		{
			MethodName: "HasRoleForUser",
			Handler:    _AuthControl_HasRoleForUser_Handler,
		},
		{
			MethodName: "DeleteRoleForUser",
			Handler:    _AuthControl_DeleteRoleForUser_Handler,
		},
		{
			MethodName: "DeleteRolesForUser",
			Handler:    _AuthControl_DeleteRolesForUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _AuthControl_DeleteUser_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _AuthControl_DeleteRole_Handler,
		},
		{
			MethodName: "DeletePermission",
			Handler:    _AuthControl_DeletePermission_Handler,
		},
		{
			MethodName: "AddPermissionForUser",
			Handler:    _AuthControl_AddPermissionForUser_Handler,
		},
		{
			MethodName: "AddPermissionsForUser",
			Handler:    _AuthControl_AddPermissionsForUser_Handler,
		},
		{
			MethodName: "DeletePermissionForUser",
			Handler:    _AuthControl_DeletePermissionForUser_Handler,
		},
		{
			MethodName: "DeletePermissionsForUser",
			Handler:    _AuthControl_DeletePermissionsForUser_Handler,
		},
		{
			MethodName: "GetPermissionsForUser",
			Handler:    _AuthControl_GetPermissionsForUser_Handler,
		},
		{
			MethodName: "HasPermissionForUser",
			Handler:    _AuthControl_HasPermissionForUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/v1/auth_control.proto",
}
