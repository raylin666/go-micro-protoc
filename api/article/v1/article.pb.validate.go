// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: article/v1/article.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListRequestMultiError, or
// nil if none found.
func (m *ListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := ListRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetSize(); val <= 0 || val > 100 {
		err := ListRequestValidationError{
			field:  "Size",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListRequestMultiError(errors)
	}

	return nil
}

// ListRequestMultiError is an error wrapping multiple validation errors
// returned by ListRequest.ValidateAll() if the designated constraints aren't met.
type ListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRequestMultiError) AllErrors() []error { return m }

// ListRequestValidationError is the validation error returned by
// ListRequest.Validate if the designated constraints aren't met.
type ListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRequestValidationError) ErrorName() string { return "ListRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRequestValidationError{}

// Validate checks the field values on ListResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListResponseMultiError, or
// nil if none found.
func (m *ListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	// no validation rules for Page

	// no validation rules for Size

	if len(errors) > 0 {
		return ListResponseMultiError(errors)
	}

	return nil
}

// ListResponseMultiError is an error wrapping multiple validation errors
// returned by ListResponse.ValidateAll() if the designated constraints aren't met.
type ListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListResponseMultiError) AllErrors() []error { return m }

// ListResponseValidationError is the validation error returned by
// ListResponse.Validate if the designated constraints aren't met.
type ListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListResponseValidationError) ErrorName() string { return "ListResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListResponseValidationError{}

// Validate checks the field values on ArticleList with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ArticleList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ArticleListMultiError, or
// nil if none found.
func (m *ArticleList) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Author

	// no validation rules for Summary

	// no validation rules for Cover

	// no validation rules for Sort

	// no validation rules for RecommendFlag

	// no validation rules for CommentedFlag

	// no validation rules for Status

	// no validation rules for ViewCount

	// no validation rules for CommentCount

	// no validation rules for ShareCount

	// no validation rules for PublisherUsername

	// no validation rules for UserId

	// no validation rules for LastCommentedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	for idx, item := range m.GetCategory() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ArticleListValidationError{
						field:  fmt.Sprintf("Category[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ArticleListValidationError{
						field:  fmt.Sprintf("Category[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ArticleListValidationError{
					field:  fmt.Sprintf("Category[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ArticleListMultiError(errors)
	}

	return nil
}

// ArticleListMultiError is an error wrapping multiple validation errors
// returned by ArticleList.ValidateAll() if the designated constraints aren't met.
type ArticleListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleListMultiError) AllErrors() []error { return m }

// ArticleListValidationError is the validation error returned by
// ArticleList.Validate if the designated constraints aren't met.
type ArticleListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleListValidationError) ErrorName() string { return "ArticleListValidationError" }

// Error satisfies the builtin error interface
func (e ArticleListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleListValidationError{}

// Validate checks the field values on ArticleCategory with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ArticleCategory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleCategory with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleCategoryMultiError, or nil if none found.
func (m *ArticleCategory) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleCategory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Pid

	// no validation rules for Name

	// no validation rules for Sort

	if len(errors) > 0 {
		return ArticleCategoryMultiError(errors)
	}

	return nil
}

// ArticleCategoryMultiError is an error wrapping multiple validation errors
// returned by ArticleCategory.ValidateAll() if the designated constraints
// aren't met.
type ArticleCategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleCategoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleCategoryMultiError) AllErrors() []error { return m }

// ArticleCategoryValidationError is the validation error returned by
// ArticleCategory.Validate if the designated constraints aren't met.
type ArticleCategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleCategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleCategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleCategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleCategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleCategoryValidationError) ErrorName() string { return "ArticleCategoryValidationError" }

// Error satisfies the builtin error interface
func (e ArticleCategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleCategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleCategoryValidationError{}

// Validate checks the field values on InfoRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InfoRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InfoRequestMultiError, or
// nil if none found.
func (m *InfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return InfoRequestMultiError(errors)
	}

	return nil
}

// InfoRequestMultiError is an error wrapping multiple validation errors
// returned by InfoRequest.ValidateAll() if the designated constraints aren't met.
type InfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InfoRequestMultiError) AllErrors() []error { return m }

// InfoRequestValidationError is the validation error returned by
// InfoRequest.Validate if the designated constraints aren't met.
type InfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InfoRequestValidationError) ErrorName() string { return "InfoRequestValidationError" }

// Error satisfies the builtin error interface
func (e InfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InfoRequestValidationError{}

// Validate checks the field values on InfoResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InfoResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InfoResponseMultiError, or
// nil if none found.
func (m *InfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Author

	// no validation rules for Summary

	// no validation rules for Cover

	// no validation rules for Sort

	// no validation rules for RecommendFlag

	// no validation rules for CommentedFlag

	// no validation rules for Status

	// no validation rules for ViewCount

	// no validation rules for CommentCount

	// no validation rules for ShareCount

	// no validation rules for PublisherUsername

	// no validation rules for UserId

	// no validation rules for LastCommentedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for Source

	// no validation rules for SourceUrl

	// no validation rules for Content

	for idx, item := range m.GetCategory() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InfoResponseValidationError{
						field:  fmt.Sprintf("Category[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InfoResponseValidationError{
						field:  fmt.Sprintf("Category[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InfoResponseValidationError{
					field:  fmt.Sprintf("Category[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.DeletedAt != nil {

		if all {
			switch v := interface{}(m.GetDeletedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InfoResponseValidationError{
						field:  "DeletedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InfoResponseValidationError{
						field:  "DeletedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InfoResponseValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InfoResponseMultiError(errors)
	}

	return nil
}

// InfoResponseMultiError is an error wrapping multiple validation errors
// returned by InfoResponse.ValidateAll() if the designated constraints aren't met.
type InfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InfoResponseMultiError) AllErrors() []error { return m }

// InfoResponseValidationError is the validation error returned by
// InfoResponse.Validate if the designated constraints aren't met.
type InfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InfoResponseValidationError) ErrorName() string { return "InfoResponseValidationError" }

// Error satisfies the builtin error interface
func (e InfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InfoResponseValidationError{}

// Validate checks the field values on AddRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddRequestMultiError, or
// nil if none found.
func (m *AddRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 32 {
		err := AddRequestValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetAuthor()); l < 1 || l > 20 {
		err := AddRequestValidationError{
			field:  "Author",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetSummary()); l < 1 || l > 140 {
		err := AddRequestValidationError{
			field:  "Summary",
			reason: "value length must be between 1 and 140 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Cover

	if val := m.GetSort(); val < 0 || val > 65535 {
		err := AddRequestValidationError{
			field:  "Sort",
			reason: "value must be inside range [0, 65535]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RecommendFlag

	// no validation rules for CommentedFlag

	// no validation rules for Status

	// no validation rules for ViewCount

	// no validation rules for CommentCount

	// no validation rules for ShareCount

	// no validation rules for Source

	// no validation rules for SourceUrl

	if utf8.RuneCountInString(m.GetContent()) < 5 {
		err := AddRequestValidationError{
			field:  "Content",
			reason: "value length must be at least 5 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddRequestMultiError(errors)
	}

	return nil
}

// AddRequestMultiError is an error wrapping multiple validation errors
// returned by AddRequest.ValidateAll() if the designated constraints aren't met.
type AddRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRequestMultiError) AllErrors() []error { return m }

// AddRequestValidationError is the validation error returned by
// AddRequest.Validate if the designated constraints aren't met.
type AddRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRequestValidationError) ErrorName() string { return "AddRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRequestValidationError{}

// Validate checks the field values on AddResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddResponseMultiError, or
// nil if none found.
func (m *AddResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddResponseMultiError(errors)
	}

	return nil
}

// AddResponseMultiError is an error wrapping multiple validation errors
// returned by AddResponse.ValidateAll() if the designated constraints aren't met.
type AddResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddResponseMultiError) AllErrors() []error { return m }

// AddResponseValidationError is the validation error returned by
// AddResponse.Validate if the designated constraints aren't met.
type AddResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddResponseValidationError) ErrorName() string { return "AddResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddResponseValidationError{}

// Validate checks the field values on UpdateRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateRequestMultiError, or
// nil if none found.
func (m *UpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 32 {
		err := UpdateRequestValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetAuthor()); l < 1 || l > 20 {
		err := UpdateRequestValidationError{
			field:  "Author",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetSummary()); l < 1 || l > 140 {
		err := UpdateRequestValidationError{
			field:  "Summary",
			reason: "value length must be between 1 and 140 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Cover

	if val := m.GetSort(); val < 0 || val > 65535 {
		err := UpdateRequestValidationError{
			field:  "Sort",
			reason: "value must be inside range [0, 65535]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RecommendFlag

	// no validation rules for CommentedFlag

	// no validation rules for Status

	// no validation rules for ViewCount

	// no validation rules for CommentCount

	// no validation rules for ShareCount

	// no validation rules for Source

	// no validation rules for SourceUrl

	if utf8.RuneCountInString(m.GetContent()) < 5 {
		err := UpdateRequestValidationError{
			field:  "Content",
			reason: "value length must be at least 5 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateRequestMultiError(errors)
	}

	return nil
}

// UpdateRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRequestMultiError) AllErrors() []error { return m }

// UpdateRequestValidationError is the validation error returned by
// UpdateRequest.Validate if the designated constraints aren't met.
type UpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRequestValidationError) ErrorName() string { return "UpdateRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRequestValidationError{}

// Validate checks the field values on UpdateResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateResponseMultiError,
// or nil if none found.
func (m *UpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateResponseMultiError(errors)
	}

	return nil
}

// UpdateResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateResponseMultiError) AllErrors() []error { return m }

// UpdateResponseValidationError is the validation error returned by
// UpdateResponse.Validate if the designated constraints aren't met.
type UpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateResponseValidationError) ErrorName() string { return "UpdateResponseValidationError" }

// Error satisfies the builtin error interface
func (e UpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateResponseValidationError{}

// Validate checks the field values on DeleteRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteRequestMultiError, or
// nil if none found.
func (m *DeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteRequestMultiError(errors)
	}

	return nil
}

// DeleteRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRequestMultiError) AllErrors() []error { return m }

// DeleteRequestValidationError is the validation error returned by
// DeleteRequest.Validate if the designated constraints aren't met.
type DeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRequestValidationError) ErrorName() string { return "DeleteRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRequestValidationError{}

// Validate checks the field values on UpdateFieldRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFieldRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFieldRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFieldRequestMultiError, or nil if none found.
func (m *UpdateFieldRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFieldRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if _, ok := _UpdateFieldRequest_Field_InLookup[m.GetField()]; !ok {
		err := UpdateFieldRequestValidationError{
			field:  "Field",
			reason: "value must be in list [sort recommend_flag commented_flag status]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Value

	if len(errors) > 0 {
		return UpdateFieldRequestMultiError(errors)
	}

	return nil
}

// UpdateFieldRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateFieldRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateFieldRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFieldRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFieldRequestMultiError) AllErrors() []error { return m }

// UpdateFieldRequestValidationError is the validation error returned by
// UpdateFieldRequest.Validate if the designated constraints aren't met.
type UpdateFieldRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFieldRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFieldRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFieldRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFieldRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFieldRequestValidationError) ErrorName() string {
	return "UpdateFieldRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFieldRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFieldRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFieldRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFieldRequestValidationError{}

var _UpdateFieldRequest_Field_InLookup = map[string]struct{}{
	"sort":           {},
	"recommend_flag": {},
	"commented_flag": {},
	"status":         {},
}

// Validate checks the field values on CategoryListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryListRequestMultiError, or nil if none found.
func (m *CategoryListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return CategoryListRequestMultiError(errors)
	}

	return nil
}

// CategoryListRequestMultiError is an error wrapping multiple validation
// errors returned by CategoryListRequest.ValidateAll() if the designated
// constraints aren't met.
type CategoryListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryListRequestMultiError) AllErrors() []error { return m }

// CategoryListRequestValidationError is the validation error returned by
// CategoryListRequest.Validate if the designated constraints aren't met.
type CategoryListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryListRequestValidationError) ErrorName() string {
	return "CategoryListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryListRequestValidationError{}

// Validate checks the field values on CategoryListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryListResponseMultiError, or nil if none found.
func (m *CategoryListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CategoryListResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CategoryListResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CategoryListResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return CategoryListResponseMultiError(errors)
	}

	return nil
}

// CategoryListResponseMultiError is an error wrapping multiple validation
// errors returned by CategoryListResponse.ValidateAll() if the designated
// constraints aren't met.
type CategoryListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryListResponseMultiError) AllErrors() []error { return m }

// CategoryListResponseValidationError is the validation error returned by
// CategoryListResponse.Validate if the designated constraints aren't met.
type CategoryListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryListResponseValidationError) ErrorName() string {
	return "CategoryListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryListResponseValidationError{}

// Validate checks the field values on ArticleCategoryList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleCategoryList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleCategoryList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleCategoryListMultiError, or nil if none found.
func (m *ArticleCategoryList) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleCategoryList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Pid

	// no validation rules for Name

	// no validation rules for Sort

	// no validation rules for Status

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for ArticleCount

	if len(errors) > 0 {
		return ArticleCategoryListMultiError(errors)
	}

	return nil
}

// ArticleCategoryListMultiError is an error wrapping multiple validation
// errors returned by ArticleCategoryList.ValidateAll() if the designated
// constraints aren't met.
type ArticleCategoryListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleCategoryListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleCategoryListMultiError) AllErrors() []error { return m }

// ArticleCategoryListValidationError is the validation error returned by
// ArticleCategoryList.Validate if the designated constraints aren't met.
type ArticleCategoryListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleCategoryListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleCategoryListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleCategoryListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleCategoryListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleCategoryListValidationError) ErrorName() string {
	return "ArticleCategoryListValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleCategoryListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleCategoryList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleCategoryListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleCategoryListValidationError{}

// Validate checks the field values on CategoryInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryInfoRequestMultiError, or nil if none found.
func (m *CategoryInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CategoryInfoRequestMultiError(errors)
	}

	return nil
}

// CategoryInfoRequestMultiError is an error wrapping multiple validation
// errors returned by CategoryInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type CategoryInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryInfoRequestMultiError) AllErrors() []error { return m }

// CategoryInfoRequestValidationError is the validation error returned by
// CategoryInfoRequest.Validate if the designated constraints aren't met.
type CategoryInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryInfoRequestValidationError) ErrorName() string {
	return "CategoryInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryInfoRequestValidationError{}

// Validate checks the field values on CategoryInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryInfoResponseMultiError, or nil if none found.
func (m *CategoryInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Pid

	// no validation rules for Name

	// no validation rules for Sort

	// no validation rules for Status

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for ArticleCount

	if m.DeletedAt != nil {

		if all {
			switch v := interface{}(m.GetDeletedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CategoryInfoResponseValidationError{
						field:  "DeletedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CategoryInfoResponseValidationError{
						field:  "DeletedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CategoryInfoResponseValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CategoryInfoResponseMultiError(errors)
	}

	return nil
}

// CategoryInfoResponseMultiError is an error wrapping multiple validation
// errors returned by CategoryInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type CategoryInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryInfoResponseMultiError) AllErrors() []error { return m }

// CategoryInfoResponseValidationError is the validation error returned by
// CategoryInfoResponse.Validate if the designated constraints aren't met.
type CategoryInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryInfoResponseValidationError) ErrorName() string {
	return "CategoryInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryInfoResponseValidationError{}

// Validate checks the field values on CategoryAddRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryAddRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryAddRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryAddRequestMultiError, or nil if none found.
func (m *CategoryAddRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryAddRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPid() < 0 {
		err := CategoryAddRequestValidationError{
			field:  "Pid",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 12 {
		err := CategoryAddRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 12 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetSort(); val < 0 || val > 65535 {
		err := CategoryAddRequestValidationError{
			field:  "Sort",
			reason: "value must be inside range [0, 65535]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return CategoryAddRequestMultiError(errors)
	}

	return nil
}

// CategoryAddRequestMultiError is an error wrapping multiple validation errors
// returned by CategoryAddRequest.ValidateAll() if the designated constraints
// aren't met.
type CategoryAddRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryAddRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryAddRequestMultiError) AllErrors() []error { return m }

// CategoryAddRequestValidationError is the validation error returned by
// CategoryAddRequest.Validate if the designated constraints aren't met.
type CategoryAddRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryAddRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryAddRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryAddRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryAddRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryAddRequestValidationError) ErrorName() string {
	return "CategoryAddRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryAddRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryAddRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryAddRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryAddRequestValidationError{}

// Validate checks the field values on CategoryAddResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryAddResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryAddResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryAddResponseMultiError, or nil if none found.
func (m *CategoryAddResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryAddResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CategoryAddResponseMultiError(errors)
	}

	return nil
}

// CategoryAddResponseMultiError is an error wrapping multiple validation
// errors returned by CategoryAddResponse.ValidateAll() if the designated
// constraints aren't met.
type CategoryAddResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryAddResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryAddResponseMultiError) AllErrors() []error { return m }

// CategoryAddResponseValidationError is the validation error returned by
// CategoryAddResponse.Validate if the designated constraints aren't met.
type CategoryAddResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryAddResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryAddResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryAddResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryAddResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryAddResponseValidationError) ErrorName() string {
	return "CategoryAddResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryAddResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryAddResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryAddResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryAddResponseValidationError{}

// Validate checks the field values on CategoryUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryUpdateRequestMultiError, or nil if none found.
func (m *CategoryUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPid() < 0 {
		err := CategoryUpdateRequestValidationError{
			field:  "Pid",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 12 {
		err := CategoryUpdateRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 12 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetSort(); val < 0 || val > 65535 {
		err := CategoryUpdateRequestValidationError{
			field:  "Sort",
			reason: "value must be inside range [0, 65535]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	// no validation rules for Id

	if len(errors) > 0 {
		return CategoryUpdateRequestMultiError(errors)
	}

	return nil
}

// CategoryUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by CategoryUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type CategoryUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryUpdateRequestMultiError) AllErrors() []error { return m }

// CategoryUpdateRequestValidationError is the validation error returned by
// CategoryUpdateRequest.Validate if the designated constraints aren't met.
type CategoryUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryUpdateRequestValidationError) ErrorName() string {
	return "CategoryUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryUpdateRequestValidationError{}

// Validate checks the field values on CategoryUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryUpdateResponseMultiError, or nil if none found.
func (m *CategoryUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CategoryUpdateResponseMultiError(errors)
	}

	return nil
}

// CategoryUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by CategoryUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type CategoryUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryUpdateResponseMultiError) AllErrors() []error { return m }

// CategoryUpdateResponseValidationError is the validation error returned by
// CategoryUpdateResponse.Validate if the designated constraints aren't met.
type CategoryUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryUpdateResponseValidationError) ErrorName() string {
	return "CategoryUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryUpdateResponseValidationError{}

// Validate checks the field values on CategoryDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryDeleteRequestMultiError, or nil if none found.
func (m *CategoryDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CategoryDeleteRequestMultiError(errors)
	}

	return nil
}

// CategoryDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by CategoryDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type CategoryDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryDeleteRequestMultiError) AllErrors() []error { return m }

// CategoryDeleteRequestValidationError is the validation error returned by
// CategoryDeleteRequest.Validate if the designated constraints aren't met.
type CategoryDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryDeleteRequestValidationError) ErrorName() string {
	return "CategoryDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryDeleteRequestValidationError{}

// Validate checks the field values on CategoryUpdateFieldRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryUpdateFieldRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryUpdateFieldRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryUpdateFieldRequestMultiError, or nil if none found.
func (m *CategoryUpdateFieldRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryUpdateFieldRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if _, ok := _CategoryUpdateFieldRequest_Field_InLookup[m.GetField()]; !ok {
		err := CategoryUpdateFieldRequestValidationError{
			field:  "Field",
			reason: "value must be in list [sort status]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Value

	if len(errors) > 0 {
		return CategoryUpdateFieldRequestMultiError(errors)
	}

	return nil
}

// CategoryUpdateFieldRequestMultiError is an error wrapping multiple
// validation errors returned by CategoryUpdateFieldRequest.ValidateAll() if
// the designated constraints aren't met.
type CategoryUpdateFieldRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryUpdateFieldRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryUpdateFieldRequestMultiError) AllErrors() []error { return m }

// CategoryUpdateFieldRequestValidationError is the validation error returned
// by CategoryUpdateFieldRequest.Validate if the designated constraints aren't met.
type CategoryUpdateFieldRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryUpdateFieldRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryUpdateFieldRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryUpdateFieldRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryUpdateFieldRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryUpdateFieldRequestValidationError) ErrorName() string {
	return "CategoryUpdateFieldRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryUpdateFieldRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryUpdateFieldRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryUpdateFieldRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryUpdateFieldRequestValidationError{}

var _CategoryUpdateFieldRequest_Field_InLookup = map[string]struct{}{
	"sort":   {},
	"status": {},
}
